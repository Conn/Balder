<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Balder.Core</name>
    </assembly>
    <members>
        <member name="T:Balder.Core.Assets.AssetLoaders.Demoniak3DLoader">
            <summary>
            Notes:
            3dsmax plugin can be found at: http://www.ozone3d.net/wak/
            </summary>
        </member>
        <member name="T:Balder.Core.Node">
            <summary>
            Abstract class representing a node in a scene
            </summary>
        </member>
        <member name="F:Balder.Core.Node.Position">
            <summary>
            Get and set the position in space for the node
            </summary>
        </member>
        <member name="F:Balder.Core.Node.Scale">
            <summary>
            Get and set the scale of the node
            </summary>
        </member>
        <member name="F:Balder.Core.Node.World">
            <summary>
            Get and set the matrix representing the node in the world
            </summary>
        </member>
        <member name="F:Balder.Core.Node.Name">
            <summary>
            Get and set the name of the node
            </summary>
        </member>
        <member name="P:Balder.Core.Node.IsVisible">
            <summary>
            Get and set wether or not the node is visible
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Balder.Core.Math.Quaternion.#ctor(Balder.Core.Math.Vector,System.Single)" -->
        <member name="M:Balder.Core.Math.Quaternion.op_Explicit(Balder.Core.Math.Quaternion)~Balder.Core.Math.Matrix">
            <summary>
            Quaternion -> matrix
            </summary>
            <param name="Quaternion"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.Literal(System.String)">
            <summary>
            A string that will be properly escaped so that reserved characters are treated as literals
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.RegEx(System.String)">
            <summary>
            Any existing regular expression pattern.
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.Group(Balder.Core.ReadableRex.Pattern)">
            <summary>
            A subset of the pattern that can be referenced as ordinal captures
            </summary>
            <param name="innerExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.NamedGroup(System.String,Balder.Core.ReadableRex.Pattern)">
            <summary>
            A subset of the pattern that can be referenced as a named capture
            </summary>
            <param name="groupName"></param>
            <param name="innerExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.Phrase(Balder.Core.ReadableRex.Pattern)">
            <summary>
            A non-capturing group
            </summary>
            <param name="innerExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.Set(Balder.Core.ReadableRex.Pattern)">
            <summary>
            Matches any single character contained within
            </summary>
            <param name="innerExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Balder.Core.ReadableRex.Pattern.NegatedSet(Balder.Core.ReadableRex.Pattern)">
            <summary>
            Matches any single character not contained within
            </summary>
            <param name="innerExpression"></param>
            <returns></returns>
        </member>
        <member name="P:Balder.Core.ReadableRex.Pattern.With">
            <summary>
            Indicates creation of a new pattern
            </summary>
        </member>
        <member name="P:Balder.Core.ReadableRex.Pattern.Repeat">
            <summary>
            Quantifies how many times to detect the previous element
            </summary>
        </member>
        <member name="P:Balder.Core.ReadableRex.Pattern.AtBeginning">
            <summary>
            Specifies that the match must occur at the beginning of the string or the beginning of the line
            </summary>
        </member>
        <member name="P:Balder.Core.ReadableRex.Pattern.AtEnd">
            <summary>
            Specifies that the match must occur at the end of the string, before \n at the end of the string, or at the end of the line.
            </summary>
        </member>
        <member name="T:Balder.Core.Runtime.StatePhase">
            <summary>
            Represents the different phases of statechanging
            </summary>
            <remarks>
            A state has different phases : 
            
            Enter - Occurs before a State goes into run phase. This phase runs only once
            Run - Running phase of a state - occurs until a statechange has been issued
            Leave - Occurs after a running state has changed the state of a statemachine. This phase runs only once.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Balder.Core.Runtime.StateMachine`1" -->
        <member name="M:Balder.Core.Runtime.StateMachine`1.ChangeState(`0)">
            <summary>
            Changes states and handles the different state phases
            </summary>
            <param name="nextState">State to change to</param>
        </member>
        <member name="M:Balder.Core.Runtime.StateMachine`1.Execute">
            <summary>
            Execute statemachine
            </summary>
        </member>
        <member name="P:Balder.Core.Runtime.StateMachine`1.PreviousState">
            <summary>
            Gets the previous state
            </summary>
        </member>
        <member name="P:Balder.Core.Runtime.StateMachine`1.CurrentState">
            <summary>
            Gets the current state
            </summary>
        </member>
        <member name="P:Balder.Core.Runtime.StateMachine`1.NextState">
            <summary>
            Gets the next state
            </summary>
        </member>
        <member name="P:Balder.Core.Runtime.StateMachine`1.DefaultState">
            <summary>
            Gets the Default state for the statemachine
            </summary>
        </member>
        <member name="F:Balder.Core.Camera.Target">
            <summary>
            Get and set the target for the Camera - The location the camera is looking at
            </summary>
        </member>
        <member name="M:Balder.Core.Camera.SetupProjection">
            <summary>
            Calculates the projection matrix
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.Forward">
            <summary>
            Get the forward vector for the camera. This is calculated from the target and position
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.Up">
            <summary>
            Get the up vector for the camera. Whenever you change the roll, this vector changes!
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.Roll">
            <summary>
            Gets or sets the roll of the camera. 
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.Near">
            <summary>
            Gets or sets the near distance clipping plane
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.Far">
            <summary>
            Gets or sets the far distance clipping plane
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.DepthDivisor">
            <summary>
            Gets the divisor used for transforming Z values for purposes such as depth buffers
            </summary>
        </member>
        <member name="P:Balder.Core.Camera.FieldOfView">
            <summary>
            Gets or sets the field of view for the camera
            </summary>
        </member>
        <member name="F:Balder.Core.ColorSpace.BytePositions">
            <summary>
            Gets or sets wether or not the position of the components are in bytes 
            or in bits within the depth of the colorspace.
            
            The depth would typically be a dword/long word (32 bits) for 32 bits per pixel or a word for 15/16 bits per
            pixel
            </summary>
        </member>
    </members>
</doc>
